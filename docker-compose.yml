version: '3.8'

services:
  # PostgreSQL Ana Veritabanı
  postgres:
    image: postgres:15-alpine
    container_name: sasko-postgres
    environment:
      POSTGRES_DB: sasko_db
      POSTGRES_USER: sasko_user
      POSTGRES_PASSWORD: sasko_password_2024
      POSTGRES_MULTIPLE_DATABASES: "player_engine,bonus_engine,affiliate_engine,risk_engine"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - sasko-network
    restart: unless-stopped

  # TimescaleDB (Zaman Serisi Verileri)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: sasko-timescaledb
    environment:
      POSTGRES_DB: sasko_timeseries
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: timescale_password_2024
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - sasko-network
    restart: unless-stopped

  # Redis (Önbellekleme ve Mesaj Kuyruğu)
  redis:
    image: redis:7-alpine
    container_name: sasko-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sasko-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass sasko_redis_2024

  # Elasticsearch (Arama ve Log Yönetimi)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sasko-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sasko-network
    restart: unless-stopped

  # RabbitMQ (Mesaj Kuyruğu)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: sasko-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: sasko_rabbit
      RABBITMQ_DEFAULT_PASS: rabbit_password_2024
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sasko-network
    restart: unless-stopped

  # API Gateway (Django)
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sasko-api-gateway
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://sasko_user:sasko_password_2024@postgres:5432/sasko_db
      - REDIS_URL=redis://:sasko_redis_2024@redis:6379/0
      - CELERY_BROKER_URL=amqp://sasko_rabbit:rabbit_password_2024@rabbitmq:5672//
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/static
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    networks:
      - sasko-network
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker (Asenkron Görevler)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sasko-celery-worker
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://sasko_user:sasko_password_2024@postgres:5432/sasko_db
      - REDIS_URL=redis://:sasko_redis_2024@redis:6379/0
      - CELERY_BROKER_URL=amqp://sasko_rabbit:rabbit_password_2024@rabbitmq:5672//
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - sasko-network
    restart: unless-stopped
    command: celery -A sasko_core worker -l info

  # Celery Beat (Periyodik Görevler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sasko-celery-beat
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://sasko_user:sasko_password_2024@postgres:5432/sasko_db
      - REDIS_URL=redis://:sasko_redis_2024@redis:6379/0
      - CELERY_BROKER_URL=amqp://sasko_rabbit:rabbit_password_2024@rabbitmq:5672//
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - sasko-network
    restart: unless-stopped
    command: celery -A sasko_core beat -l info

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sasko-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - sasko-network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: sasko-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - api-gateway
      - frontend
    networks:
      - sasko-network
    restart: unless-stopped

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: sasko-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sasko-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: sasko-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sasko_grafana_2024
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - sasko-network
    restart: unless-stopped

volumes:
  postgres_data:
  timescale_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:
  media_files:
  static_files:
  prometheus_data:
  grafana_data:

networks:
  sasko-network:
    driver: bridge
